#!/usr/bin/ruby

# Copyright (c) 2016 Apple Inc. All Rights Reserved.

# IMPORTANT NOTE: This file is licensed only for use on Apple-branded
# computers and is subject to the terms and conditions of the Apple Software
# License Agreement accompanying the package this file is a part of.
# You may not port this file to another platform without Apple's written consent.

require 'cfpropertylist'

def wait4pathWithTimeout(path, timeoutInSeconds)
     t0 = Time.now
     while true do
        return true if FileTest.exists?(path)
        sleep(1)
        break if Time.now - t0 >= timeoutInSeconds
     end
     return false
end
executable = '/usr/sbin/httpd'
if !ARGV.include?('-t')
    waitPath = '/var/run/NetworkChangeMonitorIsReady'
    if !wait4pathWithTimeout(waitPath, 30)
        `syslog -s -l error #{File.basename($0)} timed out waiting for #{waitPath}. Proceeding.`
    end
end
metadataPlist = CFPropertyList::List.new(:file => "/Library/Server/Web/Config/apache2/servermgr_web_apache2_config.plist")
metadataDict = CFPropertyList.native_types(metadataPlist.value)
sites = metadataDict["Sites"]
defaultSite = sites.find { |site| site["_id_"] == "*:443_" }
id = defaultSite["SSLPassPhrase"]["sslCertificateIdentifier"]
ENV["CERT_ID"] = id
id = defaultSite["SSLPassPhrase"]["mstCertificateIdentifier"]
ENV["MST_IDENTITY"] = id
args = ARGV
calPlistPath = "/Library/Server/Calendar and Contacts/Config/caldavd-system.plist"
if FileTest.exists?(calPlistPath)
	calPlist = CFPropertyList::List.new(:file => calPlistPath)
	calConfigDict = CFPropertyList.native_types(calPlist.value)
	args << "-DPROXY_CALENDAR" if calConfigDict["EnableCalDAV"]
	args << "-DPROXY_CONTACTS" if calConfigDict["EnableCardDAV"]
end
exec("#{executable} #{args.join(' ')}")
