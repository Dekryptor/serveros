#!/usr/bin/env /Applications/Server.app/Contents/ServerRoot/usr/bin/ruby

##
# Copyright (c) 2012-2015 Apple Inc. All Rights Reserved.
#
# IMPORTANT NOTE: This file is licensed only for use on Apple-branded
# computers and is subject to the terms and conditions of the Apple Software
# License Agreement accompanying the package this file is a part of.
# You may not port this file to another platform without Apple's written consent.
#
# IMPORTANT NOTE: This file is licensed only for use with the Wiki Server feature
# of the Apple Software and is subject to the terms and conditions of the Apple
# Software License Agreement accompanying the package this file is part of.
##

$ServerLibraryPath = '/Library/Server'
$ServiceConfigPath = $ServerLibraryPath + '/Wiki/Config'
$ServerInstallPathPrefix = '/Applications/Server.app/Contents/ServerRoot'
$LogDirectoryPath = $ServerLibraryPath + '/Wiki/Logs'
$LogPath = $LogDirectoryPath + '/collabd_database_loader.log'
MAX_XPG_CTL_LAUNCH_ATTEMPTS = 2
XPG_CTL_LAUNCH_ATTEMPT_SLEEP = 3
# Note extremely long timeout, because start may trigger a recovery and DB is unusable until it completes.
XPG_CTL_WAIT_SECONDS = 86400

ENV['BUNDLE_GEMFILE'] = "#{$ServerInstallPathPrefix}/usr/share/collabd/gems/Gemfile"

require 'rubygems'
require 'bundler/setup'

$LOAD_PATH << "#{$ServerInstallPathPrefix}/usr/share/collabd/server/ruby/lib"

require 'fileutils'
require 'find'
require 'collaboration'
require 'shellwords'
require 'logger'
require 'optparse'

unless File.exists?($LogDirectoryPath)
  `/bin/mkdir -p #{$LogDirectoryPath}`
  `/usr/sbin/chown -R 94:94 #{$LogDirectoryPath}`
end
$logger = Logger.new($LogPath)
FileUtils.chmod 0640, $LogPath
FileUtils.chown '94', '94', $LogPath

$ShouldStartDatabase = true

OptionParser.new do |opts|

  opts.on("--mode [MODE]", [:start, :stop], "Select database mode (start or stop)") do |m|
    if m == :stop
      $ShouldStartDatabase = false
    end
  end
  
end.parse!

Dir.chdir('/') do

  xpgExitStatus = nil
  retryCount = 0
  while (retryCount < MAX_XPG_CTL_LAUNCH_ATTEMPTS)
    
    $logger.info("Trying to " + ($ShouldStartDatabase ? 'start' : 'stop') + " database (attempt #{retryCount + 1})")
    
    $logger.info("Reading database cluster location from config file")
    current_config_dict = Collaboration.dictionaryWithContentsOfFile($ServiceConfigPath + '/collabd.plist')
    $DatabaseClusterDir = current_config_dict['Database']['DatabaseClusterDirectory']
    $DatabaseUser = current_config_dict['Database']['DatabaseUser']
    $DatabaseName = current_config_dict['Database']['DatabaseName']
    if $DatabaseClusterDir.nil? || $DatabaseUser.nil? || $DatabaseName.nil?
        $logger.error("Database settings not configured in collabd.plist.")
        # To do: post alert
        exit(1)
    end
    $PostgresDoNotBackupFile = $DatabaseClusterDir + "/.DoNotBackup"
    $logger.info("Database cluster is at #{$DatabaseClusterDir}")
    msg = `#{$ServerInstallPathPrefix}/usr/bin/pg_controldata #{$DatabaseClusterDir.shellescape} 2>&1`
    preflightExitStatus = $?.exitstatus
    if preflightExitStatus == 0
      $logger.info("#{$DatabaseClusterDir} looks like a proper database cluster directory")
      $logger.info("Calling out to xpg_ctl to " + ($ShouldStartDatabase ? 'start' : 'stop') + " the collabd database cluster")
      options = current_config_dict['Database']['Options']
      if options.nil?
          $logger.error("Database:Options not configured in collabd.plist.")
          # To do: post alert
          exit(2)
      end
      $PostgresSocketDir = options['unix_socket_directories']
      $PostgresSocketDir = $ServerLibraryPath + '/Wiki/PostgresSocket' if $PostgresSocketDir.nil? # Assume single string
      postgres_options_string = ""
      options.each {|k, v| postgres_options_string += "-c #{k}=#{v} "}
      if $ShouldStartDatabase
          FileUtils.touch($PostgresDoNotBackupFile)
          cmd = "#{$ServerInstallPathPrefix}/usr/bin/xpg_ctl start -w -t #{XPG_CTL_WAIT_SECONDS} -D " + $DatabaseClusterDir.shellescape + " -l #{$LogDirectoryPath}/postgres-xpg.log -o \"#{postgres_options_string}\""
      else
          cmd = "#{$ServerInstallPathPrefix}/usr/bin/xpg_ctl stop -w -D " + $DatabaseClusterDir.shellescape + " -l #{$LogDirectoryPath}/postgres-xpg.log"
          FileUtils.rm($PostgresDoNotBackupFile, :force=> true)
      end
      $logger.info("Calling out to xpg_ctl: #{cmd}")
      `sudo -u _teamsserver sh -c '#{cmd}'`
      xpgExitStatus = $?.exitstatus
      $logger.debug("xpg_ctl exit status: #{xpgExitStatus}")
      break if (xpgExitStatus == 0) || (xpgExitStatus == 7 && !$ShouldStartDatabase)
    else
      $logger.error("#{$DatabaseClusterDir} does not look like a proper database cluster directory. pg_controldata failed with status=#{preflightExitStatus}, error=#{msg.force_encoding('utf-8')}")
      msg = `/bin/ls -laeT "#{$DatabaseClusterDir}/.." "#{$DatabaseClusterDir}" 2>&1`
      $logger.error("...Cluster directory and parent contents:\n #{msg}")
    end
    $logger.debug("Sleeping for #{XPG_CTL_LAUNCH_ATTEMPT_SLEEP}s")
    sleep(XPG_CTL_LAUNCH_ATTEMPT_SLEEP)
    retryCount += 1
    
  end

  if xpgExitStatus != 0 && xpgExitStatus != 7
    $logger.error("Fatal error. Failed to #{$ShouldStartDatabase ? 'start' : 'stop'} database after #{MAX_XPG_CTL_LAUNCH_ATTEMPTS} attempts with a #{XPG_CTL_WAIT_SECONDS}s timeout (exit status is #{xpgExitStatus})")
        # To do: post alert
    exit(3)
  end
  
  if $ShouldStartDatabase
    $logger.info("Creating database user and database if they are needed")
    system($ServerInstallPathPrefix+'/usr/bin/createuser', '-h', $PostgresSocketDir, '-U', '_teamsserver', '-d', '-s', $DatabaseUser)
    if system($ServerInstallPathPrefix+'/usr/bin/createdb', '-h', $PostgresSocketDir, '-U', $DatabaseUser, $DatabaseName)
        system($ServerInstallPathPrefix+'/usr/bin/psql', '-h', $PostgresSocketDir, '-U', $DatabaseUser, '-c', 'CREATE EXTENSION intarray')
        system($ServerInstallPathPrefix+'/usr/bin/psql', '-h', $PostgresSocketDir, '-U', $DatabaseUser, '-c', 'CREATE EXTENSION hstore')
        system($ServerInstallPathPrefix+'/usr/bin/psql', '-h', $PostgresSocketDir, '-U', $DatabaseUser, '-f', $ServerInstallPathPrefix+'/usr/share/collabd/server/sql/schema.sql')
    end
  end
  
  $logger.info("Database was " + ($ShouldStartDatabase ? 'started' : 'stopped'))
  
end
exit(0)
