#!/Applications/Server.app/Contents/ServerRoot/Library/CalendarServer/bin/python
#
# Utility for fixing Calendar and Contacts directory permissions
#
# Copyright (c) 2015 Apple Inc.  All Rights Reserved.
#
# IMPORTANT NOTE:  This file is licensed only for use on Apple-labeled
# computers and is subject to the terms and conditions of the Apple
# Software License Agreement accompanying the package this file is a
# part of.  You may not port this file to another platform without
# Apple's written consent.
from __future__ import print_function

import datetime
import os
import plistlib
import subprocess
import sys


def serverRootLocation():
    """
    Return the ServerRoot value from the servermgr_calendar.plist.  If not
    present, return the default.

    @rtype: C{unicode}
    """
    plist = "/Library/Preferences/com.apple.servermgr_calendar.plist"
    serverRoot = u"/Library/Server/Calendar and Contacts"
    if os.path.exists(plist):
        serverRoot = plistlib.readPlist(plist).get("ServerRoot", serverRoot)
    if isinstance(serverRoot, str):
        serverRoot = serverRoot.decode("utf-8")
    return serverRoot


def logLocation():
    return os.path.join(serverRootLocation(), u"Logs")


def log(msg):
    logPath = os.path.join(logLocation(), "fixpermissions.log")
    try:
        timestamp = datetime.datetime.now().strftime("%b %d %H:%M:%S")
        msg = "fixpermissions: %s %s" % (timestamp, msg)
        with open(logPath, 'a') as output:
            output.write("{}\n".format(msg))  # so it appears in our log
    except IOError:
        # Could not write to log
        pass
    try:
        print(msg)
    except:
        print("Log error")


def fixPermissions(directory):
    """
    Fix the permissions on the directory heirarchy starting at "directory"
    """

    argsList = [

        # Recursively remove inherited filesystem access control list entries.
        # These may be present on /Volumes/foo if something tried to mkdir -p under
        # 'foo' while no volume called 'foo' was mounted.
        ["/bin/chmod", "-R", "-I", directory.encode("utf-8")],

        # Chown all files and directories to calendar:calendar
        ["/usr/sbin/chown", "-R", "calendar:calendar", directory.encode("utf-8")],

        # Remove group/world access
        ["/bin/chmod", "-R", "go-rwx", directory.encode("utf-8")],

    ]

    for args in argsList:
        try:
            log("Executing: {}".format(" ".join(args)))
            child = subprocess.Popen(
                args,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
            output, error = child.communicate()
            log("Output: {}".format(output))
            if child.returncode:
                log("Non-zero exit code: %d, %s" % (child.returncode, error))
        except Exception, e:
            log(e)


def main():

    if os.getuid() != 0:
        log("This program must be run as root")
        sys.exit(1)

    log("Fix-permissions starting")
    topDirectory = serverRootLocation()
    log(
        "Calendar and Contacts directory: {}".format(
            topDirectory.encode("utf-8")
        )
    )
    if not os.path.exists(topDirectory):
        log("Directory does not exist!")
        sys.exit(2)

    fixPermissions(topDirectory)
    log("Fix-permissions complete")


if __name__ == "__main__":
    main()
