/*! @framework GraphKit
    @abstract Quartz-based Objective-C charting framework.
    @discussion GraphKit is a Cocoa framework for programmatically creating 2D line, area, column and pie charts using the Quartz graphics layer of MacOS X.  GraphKit's basis in Quartz makes it extremely simple to export GraphKit charts as PDF, TIFF, or other popular data formats for use in the real world.  The main design points of GraphKit are:
    
                <ul><li>Scalability to large datasets (tens of thousands of data points)</li>
		    <li>Clean, colorful output</li>
		    <li>Interactive Zooming and Selection</li>
		    <li>Object-Oriented, Extensible Design</li></ul>
		
		GraphKit is intended for use in Cocoa programs.  This documentation assumes that the reader is at least somewhat familiar with the Objective-C programming language.

		<h2>Architecture</h2>

		If you have used ApplicationKit's NSTableView class, then many of the concepts used by GraphKit charts will be familiar to you.  Like an NSTableView, a GraphKit chart object uses a datasource to ask for the number of datasets, datapoints and values to plot.  Also similar to many other AppKit classes, GraphKit utilizes the concept of a delegate to optionally customize the behavior of its charts.  Additionally, XSGRChartView can be placed inside a scroll view, which GraphKit can also utilise to support zooming.

		<h3>Overview</h3>

		At its highest level, a GraphKit chart consists of an instance of the @link //apple_ref/GraphKit/occ/cl/XSGRChartView XSGRChartView@/link class.  The @link //apple_ref/GraphKit/occ/cl/XSGRChartView XSGRChartView@/link class manages an arbitrary number of datasets (instances of @link //apple_ref/GraphKit/occ/cl/XSGRDataSet XSGRDataSet@/link and its subclasses) and controls when and how they will be drawn.  In GraphKit, a dataset is a single, related series of data points to be plotted in the same color, line style, etc.  In the case of a line chart, for example, a single continuous line represents a dataset.  @link //apple_ref/GraphKit/occ/cl/XSGRDataSet XSGRDataSet@/link and its subclasses (@link //apple_ref/GraphKit/occ/cl/XSGRLineDataSet XSGRLineDataSet@/link, @link //apple_ref/GraphKit/occ/cl/XSGRAreaDataSet XSGRAreaDataSet@/link, @link //apple_ref/GraphKit/occ/cl/XSGRColumnDataSet XSGRColumnDataSet@/link, and @link //apple_ref/GraphKit/occ/cl/XSGRPieDataSet XSGRPieDataSet@/link) are used to contain datasets in GraphKit.  A @link //apple_ref/GraphKit/occ/cl/XSGRChartView XSGRChartView@/link can display its datasets either overlayed on top of one another or tiled (vertically or horizontally) such that each dataset is displayed on its own set of axes.  When in overlayed display mode, the datasets can be displayed independently or cumulatively such that each dataset element is drawn with its values stacked on the corresponding element of previously drawn datasets (total value or fraction of the total).  Each set of axes is represented by an instance of @link //apple_ref/GraphKit/occ/cl/XSGRAxes XSGRAxes@/link or its subclasses (@link //apple_ref/GraphKit/occ/cl/XSGRXYAxes XSGRXYAxes@/link, @link //apple_ref/GraphKit/occ/cl/XSGRPieAxes XSGRPieAxes@/link).  The @link //apple_ref/GraphKit/occ/cl/XSGRAxes XSGRAxes@/link classes are responsible for managing the scale and range of datasets as well as drawing any necessary ticks, grid lines, titles, or legends.  There is an instance of the @link //apple_ref/GraphKit/occ/cl/XSGRAxes XSGRAxes@/link class associated with the @link //apple_ref/GraphKit/occ/cl/XSGRChartView XSGRChartView@/link as well as with each @link //apple_ref/GraphKit/occ/cl/XSGRDataSet XSGRDataSet@/link contained in the chart view.  In overlayed mode, the chart's axes is used.  In tiled mode, the axes of each dataset is used

		<h3>Properties</h3>
		
		Associated with every object in the GraphKit hierarchy is a properties dictionary.  Each properties dictionary contains key-value pairs that are initialized to a default set of entries when a GraphKit object is created.  Default properties for a class can be read or modified one at a time with the @link //apple_ref/GraphKit/occ/clm/XSGRChartView/defaultPropertyForKey: +defaultPropertyForKey:@/link and @link //apple_ref/GraphKit/occ/clm/XSGRChartView/setDefaultProperty:forKey: +setDefaultProperty:ForKey:@/link methods respectively.  The entire default properties dictionary for a class can be retrieved with @link //apple_ref/GraphKit/occ/clm/XSGRChartView/defaultProperties +defaultProperties@/link or updated en mass with @link //apple_ref/GraphKit/occ/clm/XSGRChartView/setDefaultProperties: +setDefaultProperties:@/link.  Instance properties are read with @link //apple_ref/GraphKit/occ/instm/XSGRChartView/propertyForKey: propertyForKey:@/link and modified with @link //apple_ref/GraphKit/occ/instm/XSGRChartView/setProperty:forKey: setProperty:forKey:@/link method.  These methods are also available on @link //apple_ref/GraphKit/occ/cl/XSGRDataSet XSGRDataSet@/link and @link //apple_ref/GraphKit/occ/cl/XSGRAxes XSGRAxes@/link, and all subclasses of these - although the keys and values for each of class necessarily differ.
		
		Note that @link //apple_ref/GraphKit/occ/cl/XSGRAxes XSGRAxes@/link and @link //apple_ref/GraphKit/occ/cl/XSGRDataSet XSGRDataSet@/link will consult their owner if asked for the value of a property that isn't defined in their local properties dictionary.  The owner of a @link //apple_ref/GraphKit/occ/cl/XSGRDataSet XSGRDataSet@/link is always the chart to which it belongs.  The owner of a @link //apple_ref/GraphKit/occ/cl/XSGRAxes XSGRAxes@/link can be either it's chart (if it's the overlay axes) or it's associated dataset (for tiled modes), and in the latter case this can again propogate up to the data set's owner, the chart.  Thus, you can set axes-specific and dataset-specific properties in the chart itself and these will be essentially the "default" values; any axes or dataset which doesn't have specific assignments for those properties will use those in the chart.
		
		In this way you can simply assign common properties on the chart, rather than having to enumerate over all the data sets or axes modifying them individually.
		
		Also note that while a property may be specified for a particular class, say @link //apple_ref/GraphKit/occ/cl/XSGRChartView XSGRChartView's@/link @link XSGRChartFrameColor XSGRChartFrameColor@/link, this does not preclude any other class from also using that property.  For example, some @link //apple_ref/GraphKit/occ/cl/XSGRAxes XSGRAxes@/link subclasses use @link XSGRChartFrameColor XSGRChartFrameColor@/link for their own frame colours.
		
		Lastly, remember when using properties that it is always best to explicitly set your preferred values for every property that you care about.  Even if the documentation states that the default value for a given property will not change, that promise extends only to that class, not it's subclasses, or categories, or any other extension of that class.  By setting the properties explicitly you guarantee preservation of your desired behaviour.  Having said that, avoid setting explicitly properties which you <i>don't</i> care about.  That way the default value can be changed in future, if a better generic behaviour is devised, and you'll automatically inherit that positive change.
		
		<h3>Garbage Collection</h3>
		
		GraphKit version B currently supports Garbage Collection, and will continue to do so going forward.  Version A (as found in Tiger and earlier) currently does not properly support Garbage Collection.  <a href="rdar://problem/4539352">rdar://problem/4539352</a> is currently open on this.
 */